
 1. this 용법
	- 여러 개의 요소를 의미하는 CSS셀렉터를 사용하여 이벤트를 정의한 경우, 대상 요소들은 모두 동일한 이벤트를 발생 시킬 수 있다.
	- $ ( this ) 는 현재 이벤트가 발생 한 단 하나의 요소를 가리킨다.

 2. this를 부정하는 not ( this ) 
	- $ ( 요소 ) 객체의 not ( this ) 함수는 여러 HTML 요소들 중 이벤트가 발생 한 자신을 제외한 나머지 객체들을 가리킨다.

	< ul > 
		< li >< /li >
		< li >< /li >
		< li >< /li >
	< /ul > 

 	$ ( " ul > li " ) . 이벤트 ( function () {
		$ ( this ) . html ( ' 안녕 ' ) ;   // 내가 클릭한 요소에 적용
		$ ( 'ul > li' ) . not ( this ) . html ( ' Hello ' ); // 나머지 두개는 Hello라고 적용
	});

	-------------------------------------
	
	< button class = " btn " > 버튼1 < /button > 
	< button class = " btn " id = "mybtn" > 버튼2 < /button > 
 	< button class = " btn " > 버튼3 < /button > 

	- id가 mybtn 인 버튼 태그에 미적용
	$ ( ".btn" ) . not ( $ ( "#mybtn" ) ) . css ( ... );

	- < button > 태그 중에서 세 번째 요소만 제외
	$ ( ".btn" ) . not ( ".btn:eq(2)") . css ( ... );


 3. 애니메이션 처리
	- show() , hide() , toggle()
	- fadeIn() : 점점 나타나기 , fadeOut() : 점점 사라지기 , fadeToggle()
	- slideDown() : 아래로 펼침 , slideUp() : 위로 접힘 , slideToggle()

 4. modal
	- 부모창 위에 열려 있는 팝업창이, 자신이 닫히기 전에는 부모창에 접근하지 못하게 하는 형태의 윈도우
	- window.open() 처리로는 modal 윈도우를 구현 할 수 없기 때문에, HTML 페이지 안에 빈 <div>를 숨겨놓고, 이벤트가 발생 했을 때 팝업처럼 사용한다.

 5. 특정 요소를 기준으로 주변 탐색하기
	- 하나의 요소를 기준으로 하여 이전, 다음, 상위, 하위 n번째 요소를 리턴하는 함수들을 통해 HTML 구조를 탐색 할 수 있다.

	메서드 이름		설명
	next()		:	현재 요소를 기준으로 다음 요소를 리턴
	prev()		: 	현재 요소를 기준으로 이전 요소를 리턴
	parent()		: 	현재 요소의 상위 요소를 리턴
	children()		: 	현재 요소의 하위 요소를 배열로 리턴
	eq( n )		: 	현재 요소의 하위 요소중에서 n번째 요소를 선택, n의 값은 0부터 시작

ex) day03.jQ > dom.html

 5번 : $ ( " td : eq ( 4 ) " ) ; or $ ( " td " ) . eq ( 4 )

 4번 : $ ( " td : eq ( 4 ) " ) . prev ();

 6번 : $ ( " td : eq ( 4 ) " ) . next ();

 1,2,3 을 감싸는 <tr> : $ ( "td") . eq ( 4 ) .parent() . prev() ; 
	
 4,5,6 을 감싸는 <tr> : $ ( " td : eq ( 4 ) " ) . parent ();

 7,8,9 를 감싸는 <tr> : $ ( " td : eq ( 4 ) " ) . parent (). next ();

 		$ ( " td : eq ( 4 ) " ) . parent (). next ().children().eq(1);

 	
 6. <input> 요소의 입력값 검사
  6-1. val 함수의 사용
	- 입력값 설정하기
		-> 파라미터를 통해 입력값을 설정한다.

		$( 셀렉터 ).val ( "내용" );

	- 입력값 조회하기
		-> 파라미터  없이 함수를 호출하면 현재 설정되어 있는 입력값을 리턴받는다.

		let value = $ ( '셀렉터' ).val() ;

	- 조회한 입력값의 존재 여부를 if문으로 검사하면 입력여부를 알 수 있다.

		if ( !value ) {...}

	- focus () 함수의 사용
		-> focus () 함수는 입력 요소에 포커스를 강제로 설정한다.

		$ ( 셀렉터 ) . focus ();

	- 입력값 검사 패턴
	
		 let id = $ ( 셀렉터 ). val ();

		if ( ! id ) {
			alert ( '아이디를 입력해주세요.' ) ;
			$ ( 셀렉터 ) .focus ();
			return false ; // 처리중단
		}

